-- 01. Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)
SELECT *
FROM `events`
WHERE `price` IS NULL;


-- 2. Selezionare tutte le location in ordine alfabetico (82)
SELECT *
FROM `locations`
ORDER BY `name` ASC;


-- 3. Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)
SELECT *
FROM `events`
WHERE `price` < 20
AND `duration` < TIME("03:00:00");


-- 4. Selezionare tutti gli eventi di dicembre 2023 (25)
SELECT *
FROM `events`
WHERE MONTH(start) = 12 AND YEAR(start) = 2023;


-- 05. Selezionare tutti gli eventi con una durata maggiore alle 2 ore (823)
SELECT *
FROM `events`
WHERE HOUR(`duration`) > 2;


-- 06. Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e durata totale (1040)
SELECT `name`,
  DATE(start) AS start_date,
  TIME(start) AS start_hour,
  TIME(TIME(start) + `duration`) AS end_hour,
  `duration` AS total_time
FROM `events`;


-- 07. Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)
SELECT *
FROM `events`
INNER JOIN `users`
	ON users.id = events.user_id
WHERE `first_name` = "Fabiano" 
	AND `last_name` = "Lombardo";


-- 08. Selezionare il numero totale di eventi per ogni fascia di prezzo (81)
SELECT `price`, COUNT(*) AS `tot_events`
FROM `events`
GROUP BY `price`;


-- 09. Selezionare tutti gli utenti admin ed editor (9)
SELECT `first_name` AS name, `last_name` AS lastname, `roles`.`name` AS role
FROM `users`
JOIN `roles`
  ON `users`.`role_id` = `roles`.`id`
WHERE `name` LIKE 'admin' OR `name` LIKE 'editor';


-- 10. Selezionare tutti i concerti (eventi con il tag “concerti”) (72)
SELECT events.name AS nome_evento, tags.name AS tag
FROM events
JOIN event_tag
  ON events.id = event_tag.event_id
JOIN tags
  ON tags.id = event_tag.tag_id
WHERE tags.name = 'concerti';


-- 11. Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)
SELECT tags.name, COUNT(*) AS tot_events, AVG(events.price) AS average_price
FROM tags
JOIN event_tag
	ON event_tag.tag_id = tags.id
JOIN events
	ON events.id = event_tag.event_id
GROUP BY tags.id;


-- 12. Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di esse (82)
SELECT locations.name AS location_name, COUNT(*) AS number_of_events
FROM locations
JOIN events
	ON events.location_id = locations.id
GROUP BY locations.id;


-- 13. Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug: concerto-classico-serale, id: 34) (30)
SELECT users.first_name, users.last_name, events.slug AS slug, events.id AS event_id, events.name AS event_name
FROM events
JOIN bookings
	ON bookings.event_id = events.id
JOIN users
	ON bookings.user_id = users.id
WHERE events.name = "Concerto Classico Serale";


-- 14. Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” 
-- (slug: festival-jazz-estivo, id: 2) specificando nome e cognome (13)
SELECT users.first_name AS name, users.last_name AS lastname, events.name AS event_name
FROM bookings
JOIN events
	ON bookings.event_id = events.id
JOIN users
	ON bookings.user_id = users.id
WHERE events.name = "Festival Jazz Estivo";


-- 15. Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
-- biglietti totali per l’evento) (18)
SELECT COUNT(bookings.event_id) AS total_bookings, events.name AS name, events.total_tickets AS available_tickets
FROM events
JOIN bookings
    ON bookings.event_id = events.id
GROUP BY events.id
HAVING total_bookings = available_tickets;


-- 16. Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)
SELECT COUNT(events.location_id) AS numbers_of_events, locations.name
FROM locations
JOIN events
	ON events.location_id = locations.id
GROUP BY locations.id
ORDER BY numbers_of_events DESC;


-- 17. Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)
SELECT users.first_name AS name, users.last_name, COUNT(bookings.user_id) AS booked_events
FROM bookings
JOIN users
	ON bookings.user_id = users.id
JOIN events
	ON bookings.event_id = events.id
GROUP BY users.id
HAVING COUNT(bookings.user_id) > 70;


-- 18. Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
-- numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)
SELECT events.name AS event_name,
	locations.name AS location,
  COUNT(bookings.event_id) AS bookings,
  events.total_tickets - COUNT(bookings.event_id) AS remaining_tickets,
  events.total_tickets AS tot_tickets
FROM bookings
JOIN events
	ON bookings.event_id = events.id
JOIN users
	ON bookings.user_id = users.id
JOIN locations
	ON events.location_id = locations.id
GROUP BY bookings.event_id;